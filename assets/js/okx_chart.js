/* -*- coding: utf-8 -*-
 * –§–∞–π–ª: assets/js/okx_chart.js
 * ------------------------------------------------------------
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
 *   –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ UX c –¥–æ–∫-—Å—Ç—Ä–æ–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤—ã–µ–∑–∂–∞—é—â–µ–π –ø–∞–Ω–µ–ª—å—é.
 *   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: OKX (API/WS) ‚Äî –≥–ª–∞–≤–Ω—ã–π; TradingView ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞.
 *
 * –§–∞–∫—Ç—ã:
 *   ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ ?instId=BTC-USDT-SWAP | ?coin=BTC, ?interval=15|60|240|1440, ?src=okx|tv.
 *   ‚Ä¢ –ü–∞–º—è—Ç—å –≤—ã–±–æ—Ä–∞ src/interval –≤ localStorage (LAST_SRC, LAST_INTERVAL).
 *   ‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è: üü¢ –û–Ω–ª–∞–π–Ω (WS) / üü° –î–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω (REST) / üî¥ –û—Ñ—Ñ–ª–∞–π–Ω.
 *   ‚Ä¢ –í —Ä–µ–∂–∏–º–µ OKX: REST –∏—Å—Ç–æ—Ä–∏—è + WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è; –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ WS ‚Äî –∞–≤—Ç–æ-—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç –∏ REST-—Ñ–æ–ª–±—ç–∫.
 *   ‚Ä¢ –í —Ä–µ–∂–∏–º–µ TV: –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º TradingView widget –¥–ª—è OKX:COINUSDT.P.
 *
 * –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è:
 *   ‚Ä¢ –§–æ—Ä–º–∞—Ç —Å–≤–µ—á–µ–π OKX v5: [ts(ms), o, h, l, c, ...] (—Å—Ç—Ä–æ–∫–∏), REST –æ—Ç–¥–∞—ë—Ç —Å –Ω–æ–≤–µ–π—à–∏—Ö –∫ —Å—Ç–∞—Ä—ã–º.
 *   ‚Ä¢ –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö URL WS: wss://wsaws.okx.com ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç—å.
 * ------------------------------------------------------------ */

(function(){
	// ---------- DOM ----------
	const elTitle   = document.getElementById('title');
	const elChart   = document.getElementById('chart');
	const elHint    = document.getElementById('hint');

	// –î–æ–∫-—Å—Ç—Ä–æ–∫–∞ (—Å—Ç–∞—Ç—É—Å)
	const elStatusDot  = document.getElementById('status-dot');
	const elStatusText = document.getElementById('status-text');

	// –ü–∞–Ω–µ–ª—å (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
	const elSym     = document.getElementById('sym');
	const elLastUpd = document.getElementById('last-upd');
	const elOkx     = document.getElementById('okx-link');
	const elTV      = document.getElementById('tv-link');
	const elCopy    = document.getElementById('btn-copy');
	const elFav     = document.getElementById('btn-fav');

	// ---------- URL + —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ----------
	const params    = new URLSearchParams(location.search);
	const qInstId   = params.get('instId');
	const qCoin     = params.get('coin');
	let qInterval   = params.get('interval'); // "15"|"60"|"240"|"1440"
	let qSrc        = (params.get('src')||'').toLowerCase(); // okx|tv

	const LS_INT = 'LAST_INTERVAL';
	const LS_SRC = 'LAST_SRC';

	// –µ—Å–ª–∏ –≤ URL –ø—É—Å—Ç–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ localStorage (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
	if (!qInterval){
		const saved = localStorage.getItem(LS_INT);
		if (saved) { qInterval = saved; }
	}
	if (!qSrc){
		const saved = localStorage.getItem(LS_SRC);
		if (saved) { qSrc = saved; }
	}
	if (!qSrc) qSrc = 'okx';

	const clean = (s)=> (s||'').toUpperCase().replace(/[^A-Z0-9\-]/g,'').slice(0,30);
	const cleanNum = (s,def)=> {
		const n = parseInt(String(s||''),10);
		return Number.isFinite(n) && n>0 ? n : def;
	};

	let instId, coin, quote="USDT";
	if (qInstId){
		instId = clean(qInstId);
		const p = instId.split('-');
		coin = (p[0]||'BTC').replace(/[^A-Z0-9]/g,'');
		quote = (p[1]||'USDT').replace(/[^A-Z0-9]/g,'') || "USDT";
	} else {
		coin = (qCoin||'BTC').toUpperCase().replace(/[^A-Z0-9]/g,'');
		instId = `${coin}-USDT-SWAP`;
	}

	const intervalMin = cleanNum(qInterval, 60); // –¥–µ—Ñ–æ–ª—Ç 1h
	const okxBar = intervalToOkxBar(intervalMin);
	const wsChan = intervalToWsChannel(intervalMin);

	// –ü–æ–¥–ø–∏—Å–∏/—Å—Å—ã–ª–∫–∏
	elTitle.textContent = `${coin} ‚Ä¢ USDT-SWAP (OKX)`;
	elSym.textContent   = `${coin}-USDT-SWAP`;
	elOkx.href = `https://www.okx.com/trade-swap/${coin}-USDT-SWAP`;
	const tvSymbol = `OKX:${coin}${quote}.P`;
	elTV.href  = `https://www.tradingview.com/chart/?symbol=${encodeURIComponent(tvSymbol)}`;

	// –û—Ç–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–∞–Ω–µ–ª–∏
	document.querySelectorAll('#row-intervals .int').forEach(a=>{
		const v = parseInt(a.getAttribute('data-int')||'60',10);
		if (v === intervalMin) a.classList.add('active');
		a.addEventListener('click', (e)=>{
			e.preventDefault();
			if (v === intervalMin) return;
			localStorage.setItem(LS_INT, String(v));
			const url = new URL(location.href);
			url.searchParams.set('instId', instId);
			url.searchParams.set('interval', String(v));
			url.searchParams.set('src', qSrc);
			location.replace(url.toString());
		});
	});

	document.querySelectorAll('#row-sources .src').forEach(btn=>{
		const src = btn.getAttribute('data-src');
		if (src === qSrc) btn.classList.add('active');
		btn.addEventListener('click', ()=>{
			if (src === qSrc) return;
			localStorage.setItem(LS_SRC, src);
			const url = new URL(location.href);
			url.searchParams.set('instId', instId);
			url.searchParams.set('interval', String(intervalMin));
			url.searchParams.set('src', src);
			location.replace(url.toString());
		});
	});

	// –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞–Ω–µ–ª–∏
	initCommonActions();

	// ---------- –†–µ–Ω–¥–µ—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É ----------
	if (qSrc === 'tv'){
		setStatus('degraded', '–ò—Å—Ç–æ—á–Ω–∏–∫: TradingView (–≤–∏–¥–∂–µ—Ç)');  // –Ω–µ WS, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω
		elLastUpd.textContent = "–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–≤–∏–¥–∂–µ—Ç)";
		renderTradingView(tvSymbol, intervalMin);
	} else {
		setStatus('offline', '–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OKX‚Ä¶');
		renderOkxChart();
	}

	// =========================================================
	// OKX —Ä–µ–∂–∏–º (REST + WebSocket)
	// =========================================================
	function renderOkxChart(){
		const chart = LightweightCharts.createChart(elChart, {
			layout: { background: { color:'#0b0f14' }, textColor:'#e6e6e6' },
			grid:   { vertLines:{ color:'#1c232b' }, horzLines:{ color:'#1c232b' } },
			crosshair: { mode: 1 },
			rightPriceScale: { borderColor:'#2a3542' },
			timeScale: { borderColor:'#2a3542', timeVisible: true, secondsVisible: false },
			handleScroll: true, handleScale: true,
		});
		const series = chart.addCandlestickSeries({
			upColor:'#26a69a', downColor:'#ef5350', borderVisible:false, wickUpColor:'#26a69a', wickDownColor:'#ef5350',
		});

		let lastServerTsMs = 0;
		let ws = null, wsAlive=false, pingTimer=0, reconnTimer=0;

		// –§–∞–∫—Ç: –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã REST-—Ñ–æ–ª–±—ç–∫–∞ ‚Äî –ø–æ –≤–∞—à–µ–º—É –¢–ó
		const REST_PLAN = { 15:120_000, 60:300_000, 240:900_000, 1440:1_800_000 };
		const restIntervalMs = REST_PLAN[intervalMin] || 300_000;

		bootstrap().catch(err => showErr('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫', err));

		async function bootstrap(){
			await loadHistoryREST(instId, okxBar, series);
			chart.timeScale().fitContent();
			startClock();
			connectWS();
			startRestFallback();
		}

		function startClock(){
			updateLastUpd();
			setInterval(updateLastUpd, 1000);
		}
		function touchTick(){
			updateLastUpd(true);
		}
		function updateLastUpd(){
			if (!lastServerTsMs){
				elLastUpd.textContent = "–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
				return;
			}
			const diff = Math.max(0, Date.now() - lastServerTsMs);
			const sec = Math.floor(diff/1000);
			if (sec < 60) elLastUpd.textContent = `–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${sec} —Å–µ–∫ –Ω–∞–∑–∞–¥`;
			else elLastUpd.textContent = `–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${Math.floor(sec/60)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
		}

		async function loadHistoryREST(instId, bar, series){
			try{
				const url = `https://www.okx.com/api/v5/market/candles?instId=${encodeURIComponent(instId)}&bar=${encodeURIComponent(bar)}&limit=500`;
				const res = await fetch(url, { method:'GET' });
				if (!res.ok) throw new Error(`HTTP ${res.status}`);
				const j = await res.json();
				const arr = Array.isArray(j.data) ? j.data : [];
				const candles = arr.slice().reverse().map(toCandle);
				series.setData(candles);
				if (candles.length){
					lastServerTsMs = Math.max(lastServerTsMs, candles[candles.length-1].time*1000);
					touchTick();
				}
				elHint.textContent = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (REST). –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket‚Ä¶";
				// –ï—Å–ª–∏ WS –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã—Ç ‚Äî –º—ã –≤ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (REST)
				if (!wsAlive) setStatus('degraded', '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (REST)');
			}catch(err){
				showErr("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π (REST)", err);
			}
		}

		function toCandle(row){
			const ts = Number(row[0]); // ms
			return {
				time: Math.floor(ts/1000),
				open:  Number(row[1]),
				high:  Number(row[2]),
				low:   Number(row[3]),
				close: Number(row[4]),
			};
		}

		function connectWS(){
			cleanupWS();
			const url = 'wss://ws.okx.com/ws/v5/public';
			ws = new WebSocket(url);
			ws.addEventListener('open', ()=>{
				wsAlive = true;
				setStatus('online', '–û–Ω–ª–∞–π–Ω (WebSocket)');
				sendWS({"op":"subscribe","args":[{"channel": wsChan, "instId": instId}]});
				pingTimer = setInterval(()=> sendWS({"op":"ping"}), 20_000);
			});
			ws.addEventListener('message', (ev)=>{
				try{
					const m = JSON.parse(ev.data);
					if (m.event === 'subscribe' || m.op === 'pong') return;
					if (m.event === 'error') { showErr("WS error: "+(m.msg||'')); return; }
					if (m.arg && m.data && Array.isArray(m.data)){
						m.data.forEach(row=>{
							const c = toCandle(row);
							series.update(c);
							lastServerTsMs = Math.max(lastServerTsMs, c.time*1000);
							touchTick();
						});
					}
				}catch(_){}
			});
			ws.addEventListener('close', ()=>{
				wsAlive = false;
				setStatus('degraded', 'WebSocket –æ—Ç–∫–ª—é—á—ë–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ REST');
				scheduleReconnect();
			});
			ws.addEventListener('error', ()=>{
				wsAlive = false;
				setStatus('degraded', '–û—à–∏–±–∫–∞ WebSocket, –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è‚Ä¶');
				try{ ws.close(); }catch(_){}
			});
		}
		function sendWS(obj){
			try{ ws && ws.readyState===1 && ws.send(JSON.stringify(obj)); }catch(_){}
		}
		function cleanupWS(){
			try{ pingTimer && clearInterval(pingTimer); }catch(_){}
			try{ reconnTimer && clearTimeout(reconnTimer); }catch(_){}
			try{ ws && ws.close(); }catch(_){}
			ws = null;
		}
		function scheduleReconnect(){
			cleanupWS();
			reconnTimer = setTimeout(connectWS, 5000);
		}
		function startRestFallback(){
			setInterval(async ()=>{
				// –ï—Å–ª–∏ WS –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
				if (!wsAlive) await loadHistoryREST(instId, okxBar, series);
			}, restIntervalMs);
		}

		function showErr(msg, err){
			const s = (err && err.message) ? `${msg}: ${err.message}` : String(msg||'–û—à–∏–±–∫–∞');
			elHint.innerHTML = `<span class="err">${s}</span><br>
				–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞ OKX:
				<a href="${elOkx.href}" target="_blank" rel="noopener">${coin}-USDT-SWAP –Ω–∞ OKX</a>`;
			// –ï—Å–ª–∏ REST —Ç–æ–∂–µ —É–ø–∞–ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω
			setStatus('offline', '–ù–µ—Ç —Å–≤—è–∑–∏ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏');
		}
	}

	// =========================================================
	// TradingView —Ä–µ–∂–∏–º (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
	// =========================================================
	function renderTradingView(tvSymbol, intervalMin){
		if (!window.TradingView){
			const s = document.createElement('script');
			s.src = "https://s3.tradingview.com/tv.js";
			s.onload = ()=> mountTV(tvSymbol, intervalMin);
			s.onerror= ()=> elHint.innerHTML = '<span class="err">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TradingView –≤–∏–¥–∂–µ—Ç</span>';
			document.head.appendChild(s);
		}else{
			mountTV(tvSymbol, intervalMin);
		}
		function mountTV(symbol, intervalMin){
			try{
				new TradingView.widget({
					autosize: true,
					symbol: symbol,
					interval: String(intervalMin),
					timezone: "Etc/UTC",
					theme: "dark",
					style: "1",
					locale: "ru",
					withdateranges: true,
					allow_symbol_change: false,
					save_image: false,
					container_id: "chart",
				});
				elHint.textContent = "–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä–∞—Ñ–∏–∫–∞: TradingView (–≤–∏–¥–∂–µ—Ç).";
			}catch(e){
				elHint.innerHTML = '<span class="err">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TradingView –≤–∏–¥–∂–µ—Ç–∞</span>';
			}
		}
	}

	// =========================================================
	// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è + –æ–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
	// =========================================================
	function setStatus(mode, text){
	// mode: 'online' | 'degraded' | 'offline'
	elStatusDot.classList.remove('online','degraded','offline');
	elStatusDot.classList.add(mode);

	let label = '';
	if (mode === 'online')   label = 'üü¢ –û–Ω–ª–∞–π–Ω (WS) ‚Äî –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.';
	if (mode === 'degraded') label = 'üü° –î–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω (REST) ‚Äî WebSocket –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è.';
	if (mode === 'offline')  label = 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω ‚Äî –Ω–µ—Ç —Å–≤—è–∑–∏ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ/–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫).';

	elStatusText.textContent = text || (
		mode==='online' ? '–û–Ω–ª–∞–π–Ω (WS)' :
		mode==='degraded' ? '–î–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω (REST)' : '–û—Ñ—Ñ–ª–∞–π–Ω'
	);

	// –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ hover/tap
	elStatusDot.title  = label;
	elStatusText.title = '–ù–∞–∂–º–∏—Ç–µ i –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏';

	// –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –ø–æ–ø–æ–≤–µ—Ä —Å—Ç–∞—Ç—É—Å–∞, –ø—Ä–∏ —Å–º–µ–Ω–µ mode –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Äî —Ñ–∞–∫—Ç)
}

	function initCommonActions(){
		// –ò–∑–±—Ä–∞–Ω–Ω–æ–µ (localStorage:fav_coins)
		const FAV_KEY = "fav_coins";
		function favGet(){ try{ const x = JSON.parse(localStorage.getItem(FAV_KEY)||'[]'); return Array.isArray(x)?x:[]; }catch(_){return [];} }
		function favSet(arr){ try{ localStorage.setItem(FAV_KEY, JSON.stringify(arr)); }catch(_){ } }
		function favHas(){ return favGet().includes(coin); }
		function favToggle(){
			const a = favGet(); const i = a.indexOf(coin);
			if (i>=0) a.splice(i,1); else a.push(coin);
			favSet(a); refreshFavUI();
		}
		function refreshFavUI(){
			const active = favHas();
			elFav.classList.toggle('active', active);
			elFav.setAttribute('aria-pressed', String(active));
			elFav.textContent = active ? "‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º" : "‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ";
		}
		elFav.addEventListener('click', favToggle);
		refreshFavUI();

		// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
		elCopy.addEventListener('click', async ()=>{
			try{
				localStorage.setItem(LS_INT, String(intervalMin));
				localStorage.setItem(LS_SRC, qSrc);
				const u = new URL(location.href);
				u.searchParams.set('instId', instId);
				u.searchParams.set('interval', String(intervalMin));
				u.searchParams.set('src', qSrc);
				await navigator.clipboard.writeText(u.toString());
				elHint.textContent = "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞.";
			}catch(_){
				elHint.innerHTML = '<span class="err">–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É.</span>';
			}
		});
	}

	// =========================================================
	// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
	// =========================================================
	function intervalToOkxBar(min){
		if (min<=1) return '1m';
		if (min===3) return '3m';
		if (min===5) return '5m';
		if (min===15) return '15m';
		if (min===30) return '30m';
		if (min===60) return '1H';
		if (min===120) return '2H';
		if (min===240) return '4H';
		if (min>=1440) return '1D';
		return '1H';
	}
	function intervalToWsChannel(min){
		if (min<=1) return 'candle1m';
		if (min===3) return 'candle3m';
		if (min===5) return 'candle5m';
		if (min===15) return 'candle15m';
		if (min===30) return 'candle30m';
		if (min===60) return 'candle1H';
		if (min===120) return 'candle2H';
		if (min===240) return 'candle4H';
		if (min>=1440) return 'candle1D';
		return 'candle1H';
	}
})();
